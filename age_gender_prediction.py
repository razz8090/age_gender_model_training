# -*- coding: utf-8 -*-
"""Age_Gender_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vtFgPFzgSj5MwoPxCnUbbAdLlVRgiRVZ
"""

from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense
import keras
from keras import layers
import os
import numpy as np
import pandas as pd 
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import cv2
import matplotlib.pyplot as plt
from time import sleep

path ='/content/drive/My Drive/utkface_aligned_cropped'
c=os.listdir(path+'/UTKFace')

c[0]



y = np.array([[[i.split('_')[0]],[i.split('_')[1]]] for i in c])
print(y.shape)
print(y[999])

len(c)

X_data =[]
cou = 0
for i in c:
  face = cv2.imread("drive/My Drive/utkface_aligned_cropped/UTKFace/"+i,cv2.IMREAD_COLOR)
  face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)
  face =cv2.resize(face, (32,32) )
  X_data.append(face)
  cou=cou+1
  if cou%500==0:
    print("#",end="")
X_data=np.array(X_data)
X_data.shape

def imshow(img):
    plt.imshow(img, interpolation='bicubic')
    plt.xticks([]), plt.yticks([]) 
    plt.show()

X = np.squeeze(X_data)
imshow(X[10][5])
print(y[0][0])

def gen_model():
    inputs = keras.layers.Input(shape=(32, 32, 3))
    x = inputs
    x = layers.Conv2D(32,3,activation='relu')(x)
    x = layers.Conv2D(32,3,activation='relu')(x)
    x = layers.MaxPool2D(2)(x)
    x = layers.Dropout(0.3)(x)
    x = layers.Conv2D(64,3,activation='relu')(x)
    x = layers.Conv2D(64,3,activation='relu')(x)
    x = layers.MaxPool2D(2)(x)
    x = layers.Dropout(0.3)(x)
    x = layers.Conv2D(84,3,activation='relu')(x)
    x = layers.Dropout(0.3)(x)
    x = layers.Flatten()(x)
    x1 = layers.Dense(64,activation='relu')(x)
    x2 = layers.Dense(64,activation='relu')(x)
    x1 = layers.Dense(1,activation='sigmoid',name='sex_out')(x1)
    x2 = layers.Dense(1,activation='relu',name='age_out')(x2)
    model = keras.models.Model(inputs=inputs, outputs=[x1, x2])
    model.compile(optimizer='Adam', loss=['binary_crossentropy','mae'])  
    return model
model=gen_model()

X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33)
y_train=[y_train[:,1],y_train[:,0]]
y_valid=[y_valid[:,1],y_valid[:,0]]

import random
random_id=random.random()
model.summary()
callbacks = [
    keras.callbacks.EarlyStopping(patience=75, monitor='val_loss',restore_best_weights=True),
    keras.callbacks.TensorBoard(log_dir='./logs/'+str(random_id))
]
model.fit(X_train, y_train, epochs=2000,batch_size=240,validation_data=(X_valid,y_valid),callbacks=callbacks, shuffle=True)

model.save('drive/My Drive/mAge_Gender_model.h5')

new_model = keras.models.load_model('/content/drive/My Drive/23Age_Gender_model.h5')

new_model.summary()

model.evaluate(X_valid,y_valid)

X_data =[]
face1 = cv2.imread("drive/My Drive/IMG_20160405_143352.jpg",cv2.IMREAD_COLOR)
face = cv2.cvtColor(face1, cv2.COLOR_BGR2RGB)
face =cv2.resize(face, (32,32) )
X_data.append(face)
X_data=np.array(X_data)
X_data.shape

prediction = new_model.predict(X_data, batch_size=None,steps=1) #gives all class prob.
v =int(prediction[1][0])
if(int((prediction[0][0])*10)==0):
    value ='Male , Age:%s'%(v)
    plt.text(20, 62,value,color='green',fontsize=18,bbox=dict(facecolor='white',alpha=0.8))
else:
    value ='FeMale, Age:%s'%(v)
    plt.text(20, 62,value,color='green',fontsize=18,bbox=dict(facecolor='white',alpha=0.8))


plt.imshow(face1)
plt.show()

int((prediction[0][0])*10)

# 0 means the default video capture device in OS
video_capture = cv2.VideoCapture(0)
# infinite loop, break by key ESC
while True:
    if not video_capture.isOpened():
        sleep(5)
    # Capture frame-by-frame
    ret, frame = video_capture.read()

import cv2






image = cv2.imread('/content/drive/My Drive/IMG_20200228_091432.jpg',1)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

faceCascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
faces = faceCascade.detectMultiScale(
    gray,
    scaleFactor=1.3,
    minNeighbors=3,
    minSize=(60, 60)
)

print("[INFO] Found {0} Faces.".format(len(faces)))

for (x, y, w, h) in faces:
    cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
    roi_color = image[y:y + h, x:x + w]
    print("[INFO] Object found. Saving locally.")
    cv2.imwrite(str(w) + str(h) + '_faces.jpg', roi_color)

status = cv2.imwrite('faces_detected.jpg', image)
print("[INFO] Image faces_detected.jpg written to filesystem: ", status)

X_data =[]
face1 = cv2.imread("/content/107107_faces.jpg",cv2.IMREAD_COLOR)
face = cv2.cvtColor(face1, cv2.COLOR_BGR2RGB)
face =cv2.resize(face, (32,32) )
X_data.append(face)
X_data=np.array(X_data)
X_data.shape

prediction = new_model.predict(X_data, batch_size=None,steps=1) #gives all class prob.
v =int(prediction[1][0])
if(int((prediction[0][0])*10)<5):
    value ='Male , Age:%s'%(v)
    plt.text(20, 62,value,color='green',fontsize=18,bbox=dict(facecolor='white',alpha=0.8))
else:
    value ='FeMale, Age:%s'%(v)
    plt.text(20, 62,value,color='green',fontsize=18,bbox=dict(facecolor='white',alpha=0.8))


plt.imshow(face1)
plt.show()

prediction

new_model = keras.models.load_model('/content/drive/My Drive/23Age_Gender_model.h5')

image = cv2.imread('/content/drive/My Drive/IMG20190919085420.jpg',1)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

faceCascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
faces = faceCascade.detectMultiScale(
    gray,
    scaleFactor=1.3,
    minNeighbors=3,
    minSize=(60, 60)
)

print("[INFO] Found {0} Faces.".format(len(faces)))

for (x, y, w, h) in faces:
    cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
    roi_color = image[y:y + h, x:x + w]

X_data =[]
face1 = cv2.cvtColor(roi_color, cv2.COLOR_BGR2RGB)
face =cv2.resize(face1, (32,32) )
X_data.append(face)
X_data=np.array(X_data)
X_data.shape

prediction = new_model.predict(X_data, batch_size=None,steps=1) #gives all class prob.
v =int(prediction[1][0])
if(int((prediction[0][0])*10)<5):
    value ='Male , Age:%s'%(v)
    plt.text(20, 62,value,color='green',fontsize=18,bbox=dict(facecolor='white',alpha=0.8))
else:
    value ='FeMale, Age:%s'%(v)
    plt.text(20, 62,value,color='green',fontsize=18,bbox=dict(facecolor='white',alpha=0.8))


plt.imshow(face1)
plt.show()

